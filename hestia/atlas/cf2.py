import json

import boto3

from hestia import RESOURCE_PATH
from hestia.atlas.secret import SECRET, USER

# import grequests

sub_net_ips = ['108.162.228.28', '141.101.66.112', '141.101.68.136', '162.158.192.94', '108.162.213.245',
               '162.158.120.180', '162.158.121.242', '172.69.233.33', '162.158.233.101', '74.125.47.15', '74.125.73.74',
               '162.158.21.125', '141.101.70.50', '162.158.152.238', '162.158.153.216', '162.158.156.249',
               '162.158.157.76', '162.158.180.184', '162.158.181.11', '172.68.181.59', '162.158.201.17',
               '197.234.241.180', '141.101.95.188', '146.112.129.65', '172.68.212.22', '162.158.82.82',
               '162.158.85.233', '162.158.86.18', '162.158.87.5', '162.158.95.4', '208.69.33.69', '8.0.16.2',
               '162.158.60.233', '162.158.61.72', '198.41.235.232', '198.41.229.162', '162.158.108.220',
               '162.158.109.131', '162.158.110.249', '172.69.52.124', '172.69.249.45', '198.41.225.84',
               '180.249.150.251', '172.68.177.47', '162.158.196.94', '162.158.197.9', '162.158.209.11', '172.68.53.107',
               '108.162.240.229', '184.75.223.203', '69.42.58.18', '108.162.217.209', '162.158.73.196', '172.68.56.196',
               '172.68.57.11', '172.68.101.17', '162.158.237.155', '172.69.89.17', '162.158.252.46', '162.158.254.70',
               '172.68.135.229', '172.68.140.68', '198.41.241.42', '108.162.248.192', '172.68.116.34',
               '162.158.163.147', '162.158.164.221', '172.68.145.181', '172.69.132.164', '162.158.1.53',
               '162.158.221.77', '172.68.125.29', '141.101.101.78', '162.158.101.198', '172.68.136.88',
               '108.162.227.251', '161.202.144.250', '162.158.116.216', '162.158.117.37', '85.15.7.167', '208.69.34.70',
               '172.69.113.11', '172.69.189.29', '172.68.17.181', '172.68.18.112', '172.68.19.76', '188.114.106.94',
               '188.114.109.53', '162.158.248.101', '141.101.83.25', '162.158.188.159', '162.158.76.70',
               '162.158.77.144', '172.68.64.145', '172.69.60.113', '108.162.244.236', '162.158.104.202',
               '162.158.105.34', '162.158.149.53', '172.68.61.204', '172.69.56.7', '172.68.49.17', '108.162.223.148',
               '172.68.249.112', '172.68.250.54', '172.69.125.29', '162.158.37.84', '172.69.120.49', '80.111.139.235',
               '108.162.236.246', '162.158.184.4', '162.158.185.166', '172.69.236.29', '172.69.5.11', '172.69.49.11',
               '172.68.225.53', '198.41.237.54', '172.69.221.53', '172.68.33.101', '172.69.145.5', '162.158.97.23',
               '162.158.133.11', '172.68.153.89', '162.158.213.89', '108.162.220.226', '172.69.65.179', '172.69.66.69',
               '172.69.67.60', '172.68.113.71', '162.158.29.65', '173.194.169.72', '162.158.113.65', '172.68.77.95',
               '108.162.214.58', '162.158.56.107', '162.158.57.216', '172.68.209.218', '172.68.210.9', '172.68.45.254',
               '172.69.41.83', '162.158.9.17', '172.68.12.229', '172.68.13.32', '91.80.36.254', '91.80.37.103',
               '172.68.185.41', '172.68.217.113', '46.175.224.2', '162.158.125.36', '172.68.121.17', '172.68.197.29',
               '88.202.125.81', '74.125.76.8', '74.125.44.73', '172.69.141.47', '77.88.56.77', '172.68.93.137',
               '208.91.112.220', '172.68.173.113', '172.68.97.23', '162.158.49.156', '162.158.145.173', '172.69.201.29',
               '172.69.129.65', '172.69.117.101', '172.68.85.65', '162.158.5.127', '162.158.25.17', '162.158.129.35',
               '172.68.149.53', '172.69.137.5', '162.158.33.116', '172.69.77.23', '79.118.240.232', '162.158.141.65',
               '162.158.241.23', '172.69.217.5', '172.68.109.35', '172.68.221.89', '162.158.53.107', '217.116.48.21',
               '172.69.193.17', '162.158.45.83', '180.251.28.205', '172.68.129.17', '185.55.212.23', '172.68.205.41',
               '118.98.115.25', '172.69.157.65', '111.67.78.18', '180.241.110.102', '77.221.39.3', '212.243.26.254',
               '172.69.169.107', '172.68.1.17', '74.125.186.77', '212.166.132.198', '199.168.151.193']

ids_sample = [19428, 30144, 30714, 11209, 18390, 27368, 32085, 13457, 32462, 10394, 17529, 34616, 13528, 28911, 34265,
              33415, 11299, 29708, 25351, 10139, 23198, 10486, 30532, 13782, 31798, 28618, 22542, 26939, 19199, 31121,
              22415, 22812, 31849, 27952, 28877, 21337, 30561, 26147, 30392, 17555, 16501, 11729, 24680, 25670, 23254,
              34546, 23268, 14576, 32294, 24699, 10184, 33923, 22155, 18287, 27294, 31428, 28221, 11795, 29899, 34084,
              28227, 18806, 21776, 14114, 20120, 10061, 34097, 12328, 28181, 13855, 28568, 11747, 24051, 32981, 22668,
              10458, 11461, 18729, 15086, 35608, 23352, 16085, 22255, 32103, 30616, 13759, 17370, 30001, 25501, 23086,
              14073, 28405, 31885, 28348, 12883, 28410, 28359, 28225, 33757, 17797, 20182, 30187, 32658, 14319, 25953,
              13734, 17863, 14608, 11933, 27388, 28342, 30729, 34683, 18887, 19724, 16365, 31825, 25724, 23450, 34708,
              15794, 31495, 28634, 28427, 13988, 32162, 6092, 34463, 16666, 14340, 6108, 12693, 14066, 17228, 29481,
              14520, 20880, 32320, 19946, 10688, 35478, 19257, 28774, 31215, 29607, 21860, 30043, 27460, 10003, 26328,
              23853, 34572, 21831, 32673, 22303, 19306, 17359, 15817, 34346, 17437, 29120, 21991, 11075, 32469, 14918,
              17826, 35703, 20057, 18113, 29960, 21258, 32480, 33839, 50023, 6362, 28739, 12518, 19397, 35675, 19252,
              6226, 26830, 34979, 21048, 16670, 13758, 32111, 13244, 20551, 20765, 33969, 17403, 12688, 32689, 31669,
              17990, 27442, 32075, 13982, 32651, 32281, 28475, 31455, 14023, 21479, 17841, 20458, 34166, 15853, 28820,
              10338, 6303, 15024, 33763, 24860, 13788, 15984, 28831, 30501, 18600, 26383, 28493, 32352, 31716, 11379,
              14926, 33320, 32259, 15344, 29759, 19690, 10324, 21662, 24057, 18288, 26374, 32509, 6222, 29186, 28899,
              28886, 29435, 21526, 13231, 31549, 13948, 33514, 27873, 29530, 10736, 10221, 33421, 30800, 24171, 6087,
              32125, 31706, 14531, 26749, 23373, 11857, 22278, 12154, 19104, 13146, 31070, 13200, 25432, 20210, 24247,
              35437, 21350, 24081, 22999, 16665, 34096, 17304, 30967, 10920, 34588, 24086, 21502, 16777, 12174, 12602,
              15634, 13514, 23180, 10953, 26113, 35221, 18309, 17276, 32041, 33037, 22294, 23461, 35731, 22074, 17566,
              28687, 10813, 21999, 23218, 30071, 31533, 12264, 35103, 34016, 22198, 31720, 32961, 31753, 11463, 33428,
              27757, 21739, 34484, 12726, 27362, 13978, 24915, 34870, 15269, 31505, 31028, 28046, 14387, 31562, 24568,
              34604, 18478, 22026, 16130, 10692, 24936, 17979, 30458, 25004, 13308, 23076, 30305, 17244, 28716, 34307,
              29224, 23956, 13873, 14768, 26948, 20708, 21393, 11590, 31224, 31785, 17423, 10674, 26863, 23223, 22899,
              19927, 33057, 11813, 24889, 33723, 10343, 16248, 32595, 35076, 28676, 24559, 28728, 32826, 35560, 19348,
              21286, 33650, 31904, 32933, 33274, 23343, 14676, 19078, 25347, 26034, 18898, 22414, 24637, 35031, 29562,
              13688, 31416, 33869, 25441, 6079, 20073, 6157, 18305, 21499, 22257, 19624, 16765, 20606, 21347, 25177,
              23178, 25199, 29682, 24953, 14333, 29797, 29389, 15675, 35277, 24938, 20567, 20981, 12835, 32748, 10679,
              10751, 26945, 30370, 12022, 32061, 30766, 28255, 11606, 13595, 35480, 18572, 12848, 32536, 16064, 29681,
              33446, 19044, 25331, 16466, 29239, 15146, 31866, 11983, 22338, 10637, 17414, 12300, 28183, 34622, 20012,
              10095, 12239, 21697, 32202, 21614, 20290, 20236, 33754, 14205, 34391, 24031, 30015, 33599, 14355, 20466,
              19198, 32726, 18081, 6101, 12713, 21536, 10357, 31370, 19032, 32724, 10415, 32646, 12486, 32644, 32834,
              20690, 19121, 19166, 6195, 16348, 35104, 28486, 29780, 18801, 35640, 16018, 29765, 34292, 21432, 32512,
              13610, 31101, 22893, 33246, 31734, 30068, 13159, 13911, 18061, 26175, 12821, 34730, 17262, 16506, 18110,
              32983, 19908, 10946, 21833, 33596, 21893, 35112, 30832, 23165, 21239, 14122, 30712, 20515, 33006, 34513,
              27619, 13521, 11905, 31640, 17330, 13396, 10502, 6243, 28890, 26518, 19239, 17554, 20761, 21076, 28702,
              23109, 31403, 30434, 11155, 24900, 11702, 22376, 23993, 35498, 12032, 18833, 31607, 12946, 29010, 34220,
              30636, 28790, 26496, 18036, 20049, 13711, 31758, 17062, 12975, 33289, 17889, 35066, 31919, 13551, 6161,
              32094, 20376, 15121, 13415, 33011, 24368, 33185, 10866, 28197, 31255, 14199, 33403, 33735, 26255, 16991,
              16734, 18939, 34432, 50017, 16157, 13086, 31442, 12980, 19895, 33718, 33055, 33356, 14016, 33820, 19291,
              34435, 29219, 24957, 32695, 30885, 30900, 35668, 10772, 23920, 28319, 13837, 25627, 14875, 18845, 34077,
              33077, 20035, 24180, 23288, 20681, 28729, 21934, 14384, 12238, 28916, 10777, 33517, 29126, 31436, 23206,
              12739, 24994, 15728, 11046, 25646, 11327, 15018, 22444, 29014, 16116, 17912, 33561, 35473, 12085, 11240,
              18665, 13781, 30896, 21000, 34684, 35474, 6342, 31628, 35441, 34667, 29622, 35607, 33705, 35557, 14325,
              29339, 6159, 33086, 16016, 32593, 6146, 28987, 26261, 12800, 15015, 29902, 18250, 12615, 23714, 22182,
              32297, 18438, 32429, 21554, 32293, 14631, 25676, 18567, 11003, 13131, 33694, 24801, 20596, 28320, 24336,
              13656, 23262, 14076, 10497, 21569, 33636, 20025, 23697, 35653, 13779, 29133, 29348, 13393, 24330, 17477,
              24817, 12476, 34747, 30752, 31765, 20621, 14943, 30129, 21735, 21280, 24535, 26862, 23173, 18486, 23237,
              23252, 14846, 18129, 35527, 10335, 21105, 17003, 26622, 16007, 28688, 33759, 25764, 18609, 10727, 11236,
              16971, 31727, 20523, 33854, 34804, 32169, 11583, 11361, 11768, 14337, 6235, 21606, 23719, 6341, 31489,
              27833, 34132, 30030, 33477, 28902, 33128, 34279, 32417, 32356, 32632, 34537, 21690, 10444, 28201, 18286,
              18613, 32776, 33870, 32908, 13263, 19722, 17174, 34123, 16987, 35415, 12234, 32249, 11710, 21246, 30410,
              32732, 32076, 18056, 16075, 19609, 11394, 27826, 18675, 15041, 11635, 31030, 12784, 23383, 28582, 15370,
              28451, 23077, 22859, 16212, 50050, 13680, 28965, 30515, 23839, 30637, 25763, 12681, 26192, 35140, 26055,
              14271, 24774, 35364, 29287, 14827, 26124, 18326, 10238, 29720, 15330, 18013, 26096, 27383, 15669, 18389,
              33578, 33043, 32730, 15523, 10743, 15324, 17875, 25988, 34341, 34203, 20432, 18837, 14084, 11958, 12895,
              22979, 12579, 34114, 34960, 33582, 10612, 23771, 12093, 17229, 29125, 18741, 22015, 13448, 34342, 29502,
              31491, 15793, 6174, 31431, 11947, 31172, 28744, 30478, 12955, 21705, 11098, 10381, 33992, 15051, 29005,
              10487, 19479, 34039, 34526, 34598, 27180, 12121, 20407, 14778, 20817, 28562, 30582, 15570, 19080, 21485,
              33122, 10535, 14366, 35272, 12621, 29383, 21363, 35577, 13962, 13297, 12999, 33812, 25019, 18369, 30021,
              18414, 30661, 31131, 17962, 10611, 28743, 31390, 33830, 6220, 15633, 22820, 23310, 11438, 29004, 22215,
              25203, 23836, 29606, 11043, 23005, 31314, 28000, 19798, 16542, 21920, 25239, 31867, 27282, 33575, 30702,
              35553, 22399, 26946, 25081, 11010, 6187, 21158, 20231, 16799, 29198, 29662, 14623, 31354, 14244, 24798,
              23875, 27199, 13942, 10441, 21170, 18062, 31163, 14132, 34428, 21067, 27739, 11200, 33977, 21272, 17739,
              32302, 18569, 32389, 11260, 23892, 27166, 33455, 32605, 28477, 13378, 6258, 13654, 29509, 35293, 32368,
              33928, 12364, 30236, 29333, 26966, 32452, 27555, 34300, 14719, 34592, 16297, 15088, 27685, 28329, 10514,
              34977, 6217, 33833, 26580, 33890, 32558, 13310, 18916, 22954, 24066]

valid_ids = [10003, 10061, 10095, 10139, 10184, 10221, 10238, 10324, 10335, 10338, 10343, 10357, 10381, 10415, 10444,
             10458, 10486, 10487, 10497, 10502, 10535, 10611, 10612, 10637, 10674, 10679, 10688, 10692, 10727, 10736,
             10743, 10751, 10772, 10777, 10866, 10920, 10946, 10953, 11010, 11046, 11075, 11098, 11155, 11200, 11209,
             11236, 11240, 11260, 11299, 11361, 11379, 11438, 11583, 11590, 11606, 11635, 11710, 11729, 11747, 11768,
             11857, 11905, 11933, 11958, 12032, 12093, 12121, 12154, 12174, 12234, 12238, 12239, 12300, 12328, 12364,
             12476, 12486, 12518, 12579, 12602, 12615, 12621, 12681, 12688, 12693, 12713, 12726, 12739, 12784, 12800,
             12848, 12883, 12895, 12946, 12955, 12975, 12980, 12999, 13086, 13131, 13146, 13159, 13200, 13244, 13308,
             13378, 13396, 13415, 13448, 13457, 13514, 13521, 13528, 13551, 13595, 13610, 13654, 13656, 13680, 13688,
             13711, 13734, 13758, 13759, 13781, 13782, 13788, 13837, 13855, 13873, 13942, 13948, 13978, 14016, 14023,
             14066, 14114, 14132, 14199, 14205, 14244, 14271, 14319, 14325, 14333, 14337, 14340, 14366, 14384, 14520,
             14531, 14576, 14608, 14623, 14676, 14719, 14768, 14778, 14827, 14875, 14918, 14926, 14943, 15015, 15018,
             15024, 15041, 15051, 15086, 15121, 15146, 15269, 15330, 15570, 15633, 15634, 15669, 15675, 15728, 15793,
             15794, 15817, 15853, 15984, 16016, 16085, 16116, 16130, 16157, 16212, 16248, 16348, 16365, 16466, 16501,
             16506, 16542, 16665, 16666, 16670, 16734, 16765, 16777, 16799, 16971, 16987, 16991, 17003, 17174, 17228,
             17229, 17244, 17262, 17276, 17304, 17330, 17359, 17370, 17403, 17423, 17437, 17477, 17529, 17554, 17566,
             17739, 17797, 17826, 17863, 17875, 17889, 17912, 17962, 18013, 18036, 18056, 18061, 18062, 18081, 18110,
             18113, 18129, 18250, 18286, 18287, 18305, 18309, 18326, 18389, 18390, 18414, 18438, 18478, 18567, 18569,
             18572, 18600, 18609, 18613, 18665, 18675, 18729, 18801, 18806, 18833, 18837, 18845, 18898, 18916, 18939,
             19032, 19044, 19078, 19080, 19104, 19121, 19166, 19198, 19199, 19239, 19252, 19257, 19291, 19348, 19397,
             19428, 19479, 19609, 19624, 19690, 19722, 19724, 19895, 19908, 19927, 19946, 20025, 20035, 20049, 20057,
             20073, 20182, 20210, 20231, 20236, 20290, 20376, 20407, 20432, 20458, 20466, 20515, 20523, 20551, 20567,
             20596, 20606, 20681, 20690, 20761, 20765, 20817, 20880, 20981, 21000, 21048, 21067, 21076, 21105, 21170,
             21239, 21246, 21272, 21280, 21286, 21337, 21350, 21363, 21393, 21432, 21479, 21485, 21502, 21526, 21536,
             21554, 21569, 21606, 21614, 21662, 21690, 21705, 21735, 21739, 21776, 21831, 21833, 21860, 21893, 21920,
             21934, 22015, 22026, 22074, 22155, 22182, 22198, 22255, 22257, 22294, 22303, 22376, 22399, 22444, 22542,
             22668, 22812, 22820, 22859, 22893, 22899, 22954, 22979, 22999, 23005, 23077, 23109, 23173, 23180, 23198,
             23218, 23223, 23237, 23252, 23254, 23268, 23288, 23343, 23352, 23373, 23461, 23697, 23714, 23719, 23771,
             23836, 23839, 23853, 23875, 23892, 23956, 23993, 24057, 24066, 24081, 24086, 24171, 24180, 24247, 24330,
             24336, 24535, 24559, 24568, 24637, 24680, 24699, 24774, 24798, 24860, 24900, 24915, 24938, 24953, 24957,
             24994, 25019, 25177, 25203, 25239, 25331, 25347, 25351, 25432, 25441, 25627, 25646, 25670, 25676, 25724,
             25764, 25953, 25988, 26034, 26055, 26096, 26124, 26147, 26175, 26192, 26261, 26374, 26496, 26518, 26622,
             26830, 26862, 26863, 26939, 26945, 26946, 26948, 26966, 27166, 27180, 27199, 27282, 27294, 27362, 27368,
             27383, 27460, 27619, 27685, 27757, 27826, 27833, 27873, 27952, 28000, 28046, 28181, 28183, 28201, 28221,
             28225, 28227, 28255, 28320, 28342, 28348, 28405, 28410, 28427, 28451, 28477, 28486, 28493, 28568, 28634,
             28676, 28687, 28688, 28702, 28716, 28728, 28729, 28739, 28743, 28744, 28790, 28820, 28831, 28877, 28890,
             28899, 28902, 28911, 28965, 28987, 29004, 29005, 29010, 29120, 29186, 29198, 29219, 29239, 29287, 29333,
             29339, 29348, 29389, 29435, 29502, 29509, 29606, 29607, 29662, 29681, 29682, 29720, 29759, 29765, 29780,
             29797, 29960, 30001, 30015, 30021, 30030, 30068, 30071, 30144, 30187, 30305, 30370, 30392, 30458, 30478,
             30501, 30532, 30561, 30582, 30616, 30636, 30702, 30712, 30714, 30752, 30766, 30832, 30885, 30896, 30900,
             31028, 31030, 31070, 31101, 31121, 31131, 31163, 31215, 31224, 31255, 31314, 31390, 31403, 31416, 31428,
             31436, 31442, 31455, 31489, 31491, 31495, 31505, 31533, 31562, 31669, 31716, 31727, 31734, 31758, 31765,
             31785, 31798, 31825, 31849, 31866, 31867, 31885, 31904, 31919, 32041, 32061, 32075, 32085, 32103, 32111,
             32125, 32162, 32249, 32259, 32281, 32293, 32294, 32297, 32302, 32320, 32352, 32368, 32389, 32417, 32429,
             32452, 32462, 32469, 32480, 32509, 32512, 32536, 32558, 32593, 32595, 32644, 32646, 32658, 32673, 32689,
             32695, 32724, 32726, 32730, 32748, 32776, 32826, 32834, 32908, 32933, 32961, 32981, 32983, 33006, 33037,
             33055, 33057, 33077, 33086, 33122, 33128, 33185, 33246, 33289, 33320, 33356, 33403, 33415, 33421, 33446,
             33477, 33514, 33517, 33561, 33575, 33578, 33582, 33596, 33599, 33636, 33650, 33694, 33705, 33735, 33757,
             33759, 33763, 33812, 33820, 33830, 33833, 33839, 33854, 33869, 33870, 33890, 33923, 33928, 33969, 33977,
             33992, 34039, 34077, 34084, 34097, 34114, 34123, 34132, 34166, 34203, 34265, 34279, 34292, 34300, 34307,
             34342, 34346, 34428, 34432, 34435, 34463, 34513, 34526, 34546, 34572, 34588, 34592, 34598, 34622, 34667,
             34683, 34684, 34730, 34747, 34804, 34870, 34977, 34979, 35031, 35066, 35076, 35103, 35104, 35112, 35140,
             35272, 35293, 35364, 35415, 35437, 35473, 35478, 35480, 35498, 35527, 35553, 35557, 35560, 35577, 35607,
             35608, 35640, 35668, 35675, 35703, 35731, 50017, 50023, 50050, 6079, 6087, 6092, 6101, 6108, 6146, 6157,
             6159, 6161, 6174, 6187, 6195, 6217, 6220, 6222, 6226, 6235, 6243, 6258, 6303, 6341, 6342, 6362, 10394,
             10441, 10813, 11003, 11327, 11461, 11463, 11702, 11795, 11813, 11947, 11983, 12022, 12085, 12264, 12821,
             12835, 13231, 13263, 13310, 13393, 13779, 13962, 13982, 13988, 14073, 14084, 14355, 14387, 15088, 15344,
             15370, 15523, 16007, 16018, 16075, 16297, 17414, 17555, 17841, 17979, 18288, 18369, 18887, 19306, 20012,
             20621, 21158, 21258, 21347, 21499, 21991, 21999, 22278, 22338, 22414, 22415, 23076, 23086, 23165, 23178,
             23206, 23262, 23383, 23920, 24031, 24368, 24801, 24817, 24889, 24936, 25004, 25199, 25763, 26113, 26255,
             26328, 26580, 26749, 27388, 27739, 28197, 28319, 28359, 28475, 28562, 28582, 28618, 28774, 28886, 28916,
             29014, 29125, 29133, 29383, 29481, 29530, 29708, 29899, 29902, 30129, 30410, 30434, 30637, 30661, 30729,
             30800, 30967, 31172, 31354, 31370, 31628, 31640, 31706, 31720, 31753, 32094, 32202, 32732, 33011, 33043,
             33274, 33428, 33718, 33723, 34220, 34341, 34391, 34484, 34537, 34604, 34616, 34708, 34960, 35441, 35474,
             11394, 13297, 13911, 14076, 14122, 14631, 14846, 15324, 16064, 17062, 17990, 18486, 19798, 20120, 20708,
             23450, 24051, 25081, 26383, 27555, 28329, 29126, 29224, 29562, 29622, 30043, 30236, 30515, 31549, 31607,
             32076, 32356, 32605, 32632, 32651, 33455, 33754, 34016, 35277, 35653]

dns_data = {}  # {probe: (ip)}
ips = set()  # [ip]}
city_ips = {}  # {city: (ip)}}
city_sub_nets = {}  # {city: (subnet)}
sub_net_cities = {}  # {subnet: city}
city_probes = {}  # {city: (probe)}
sub_net_representation = {}


def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield l[i:i + n]


def clear_dns():
    client = boto3.client('route53')
    while True:
        sets = client.list_resource_record_sets(HostedZoneId="Z1698DP7F9XEFJ")['ResourceRecordSets']
        sets = list(filter(lambda a: a['Type'] == 'A' and a['Name'].startswith('demo'), sets))
        if sets:
            client.change_resource_record_sets(HostedZoneId="Z1698DP7F9XEFJ", ChangeBatch={
                'Changes': [{'Action': 'DELETE', "ResourceRecordSet": se} for se in sets]})
        else:
            break


def add_dns():
    sets = []
    for i in valid_ids[900:]:
        record = {'Name': 'demo%d.xuebingli.com.' % i, 'Type': 'A',
                  'TTL': 60, 'ResourceRecords': [{'Value': '1.2.3.4'}]}
        sets.append(record)
    client = boto3.client('route53')
    client.change_resource_record_sets(HostedZoneId="Z1698DP7F9XEFJ", ChangeBatch={
        'Changes': [{'Action': 'UPSERT', "ResourceRecordSet": se} for se in sets]})


def init_dns():
    if input('Are you sure to initiate DNS records? y/[n]: ') != 'y':
        print('Canceled')
        return None
    # clear_dns()
    add_dns()


def get_city(ip):
    j = json.load(open('/Users/johnson/huawei-data/exp8/location/' + ip, encoding='utf-8'))
    city = j.get('city', {})
    name = city.get('names', {}).get('en', '')
    lat = j['location']['latitude']
    lon = j['location']['longitude']
    # if not name:
    #     print('invalid location data: ' + ip)
    #     print(json.dumps(j))
    return (lat, lon), name


def dns_queries():
    dns_data.clear()
    queries = json.load(open(RESOURCE_PATH + '/exp2/dns-dump.json'))
    for query in queries:
        name = list(query['_source']['layers']['dns']['Queries'].values())[0]['dns.qry.name'].lower()
        if name.split('.')[-2] != 'xuebingli' or len(name.split('.')) != 4:
            continue
        probe_id = int(name.split('.')[0])
        ip = query['_source']['layers']['ip']['ip.src']
        prefix = ip[:ip.rfind('.')]
        sub_net_representation[prefix] = ip
        if probe_id not in dns_data:
            dns_data.setdefault(probe_id, set()).add(ip)
    print(sub_net_representation['172.68.225'])


def dc_ips():
    ips.clear()
    for dns in dns_data.values():
        for ip in dns:
            ips.add(ip)
    # cities = set([get_city(ip) for ip in ips])
    city_ips.clear()
    for ip in ips:
        city_ips.setdefault(get_city(ip), []).append(ip)
    city_sub_nets.clear()
    city_sub_nets.update({k: sorted(list(set([v[:v.rfind('.')] for v in val]))) for k, val in city_ips.items()})
    # for key, val in city_sub_nets.items():
    #     print('%s : %s' % (key, val))
    print('number of cities: %d' % len(city_sub_nets))
    print('number of sub nets: %d' % sum([len(v) for v in city_sub_nets.values()]))
    sub_net_cities.clear()
    for city, sub_nets in city_sub_nets.items():
        for sub_net in sub_nets:
            sub_net_cities.setdefault(sub_net, set()).add(city)


def dns(ids):
    if input('Are you sure to crete DNS measurements? y/[n]: ') != 'y':
        print('Canceled')
        return None
    requests = []
    for id_chunk in chunks(ids, 1000):
        pass


def ping(ids, targets):
    if input('Are you sure to crete ping mesh measurements? y/[n]: ') != 'y':
        print('Canceled')
        return None
    requests = []
    for target in targets[150:]:
        for id_chunk in chunks(ids, 1000):
            requests.append(grequests.post('https://atlas.ripe.net/api/v2/measurements//?key=' + SECRET, json={
                "definitions": [
                    {
                        "target": target,
                        "af": 4,
                        "packets": 1,
                        "size": 48,
                        "description": "Ping measurement to %s" % target,
                        "tags": ["anqi-mesh-2"],
                        "resolve_on_probe": False,
                        "skip_dns_check": False,
                        "include_probe_id": False,
                        "type": "ping"
                    }
                ],
                "probes": [
                    {
                        "type": "probes",
                        "value": ','.join([str(i) for i in id_chunk]),
                        "requested": len(id_chunk)
                    }
                ],
                "is_oneoff": True,
                "bill_to": USER
            }, headers={'Content-Type': 'application/json', 'Accept': 'application/json'}))
    print('waiting for responses')
    responses = grequests.map(requests)
    print([r.text for r in responses])


def full_mesh_ping():
    # city_sub_net_ips = {k: [i + '.4' for i in v] for k, v in city_sub_nets.items()}
    # city_sub_net_ips = {k: [sub_net_representation[i] for i in v] for k, v in city_sub_nets.items()}
    # for subips in city_sub_net_ips.values():
    #     sub_net_ips.extend(subips)
    # print(sub_net_ips)
    ping(ids_sample, sub_net_ips)


def analyse_dns():
    res = {}
    for name in ['15766710', '15766711', '15766715', '15766720']:
        j = json.load(open('/Users/johnson/huawei-data/exp8/dns/RIPE-Atlas-measurement-%s.json' % name))
        data = {i['prb_id']: [j['result']['rt'] for j in i['resultset'] if 'result' in j] for i in j}
        for k, v in data.items():
            res.setdefault(k, []).append(v)
    print(res)


def main():
    # init_dns()
    dns_queries()
    dc_ips()
    # full_mesh_ping()
    analyse_dns()


if __name__ == '__main__':
    main()
